name: Deploy Astro SSR to Azure with OIDC

on:
  push:
    branches:
      - main
  # Uncomment to allow manual trigger from GitHub UI:
  # workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AZURE_WEBAPP_NAME: TimBlogSite
  AZURE_SUBSCRIPTION_ID: e78d1e98-5768-4c31-be79-de816d47cbb9
  AZURE_RESOURCE_GROUP: TimBlogSite_group

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: ‚úÖ Checkout code
        uses: actions/checkout@v3

      - name: ‚úÖ Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'

      - name: ‚úÖ Clean install dependencies
        run: npm ci

      - name: üõ†Ô∏è Build Astro SSR app
        run: npm run build

      - name: üßπ Make startup.sh executable
        run: chmod +x startup.sh || true

      - name: üì¶ Prepare clean deployment package
        run: |
          echo "Cleaning deploy/ folder..."
          rm -rf deploy
          mkdir deploy
          cp -r dist/* deploy/
          cp startup.sh deploy/
          cp package.json deploy/
          cp package-lock.json deploy/

      - name: üß™ Debug: show deployed package.json
        run: cat deploy/package.json

      - name: üîê Login to Azure using OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: üöÄ Deploy to Azure Web App (SSR)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: ./deploy

      - name: üìÑ Stream startup logs from Azure
        run: |
          echo "Waiting for app to boot..."
          sleep 15
          az webapp log tail --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --timeout 30

      - name: üîç Verify app is live (auto-fail for rollback)
        run: |
          echo "Checking app health at https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          for i in {1..10}; do
            http_status=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net)
            if [ "$http_status" -eq 200 ]; then
              echo "‚úÖ App is live! Status: $http_status"
              exit 0
            else
              echo "‚è≥ Waiting for app... (Status: $http_status)"
              sleep 5
            fi
          done
          echo "‚ùå App did not respond with 200 OK. Consider rollback."
          exit 1
